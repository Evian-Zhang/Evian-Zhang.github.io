{"version":3,"sources":["login-page.tsx","data-processor.ts","data-page.tsx","main-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginPage","props","username","token","state","isQuerying","buttonContent","event","this","target","value","length","inputHandler","setState","message","error","tokenTip","style","width","href","rel","position","top","left","transform","msTransform","span","height","onChange","onUsernameInputChange","bind","placeholder","Password","onTokenInputChange","addonAfter","content","trigger","placement","type","theme","size","onClick","onSubmit","disabled","Component","ContributionData","hasAnyContributions","totalContributions","contributionDays","contributionMonths","Array","month","CommitData","totalCommitContributions","totalRepositoriesWithContributedCommits","languages","Map","IssueData","totalIssueContributions","totalRepositoryWithContributedIssues","popularIssueContribution","PullRequestData","totalPullRequestContributions","totalRepositoryWithContributedPullRequests","popularPullRequestContribution","RepositoryData","totalRepositoryContributions","stars","StarData","WatchData","watches","DataProcessor","rawData","contributions","commits","issues","pullRequests","repositories","headers","body","fetch","method","JSON","stringify","res","status","Promise","reject","text","reISO","dateTimeReceiver","key","exec","Date","parse","resolve","data","user","contributionsCollection","contributionCalendar","weeks","week","day","date","getMonth","contributionCount","commitContributionsByRepository","repository","nodes","rank","score","preScore","get","name","set","totalRepositoriesWithContributedIssues","issue","title","totalRepositoriesWithContributedPullRequests","pullRequest","repositoryContributions","stargazers","totalCount","starredRepositories","watching","Title","Typography","Paragraph","DataPage","dataProcessor","fetchingTip","isProcessing","fetchEvents","then","processData","renderDataPage","catch","goBack","id","display","justifyContent","alignItems","isInteractive","enableRadialLabels","pieChart","hardMonths","filter","diligentMessage","maxMonths","max","push","map","toString","join","index","indexBy","keys","margin","right","bottom","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","barChart","hasCommits","commitMessage1","from","sort","language1","language2","language","enableSlicesLabels","hasRepository","repositoryMessage1","repositoryMessage2","hasStar","starMessage1","hasWatch","WatchMessage1","hasIssue","issueMessage1","hasPullrequest","pullRequestMessage1","domtoimage","toBlob","document","getElementById","blob","saveAs","e","console","log","ReactDOM","render","align","textAlign","contributionFrame","diligenceFrame","commitFrame","repositoryFrame","starFrame","watchFrame","issueFrame","pullRequestFrame","saveFrame","MainPage","isUsernameValid","usernameTokenHandler","App","className","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c1ea4b2.chunk.js","sourcesContent":["import React, {ChangeEvent, Component} from 'react'\nimport {Button, Col, Icon, Input, message, Row, Popover} from \"antd\";\nimport 'antd/dist/antd.css';\n\ninterface LoginPageProps {\n    inputHandler: (arg1: string, arg2: string) => void\n}\n\ninterface LoginPageState {\n    isQuerying: boolean,\n    buttonContent: string\n}\n\nclass LoginPage extends Component<LoginPageProps, LoginPageState> {\n    username: string;\n    token: string;\n\n    constructor(props: LoginPageProps) {\n        super(props);\n\n        this.username = \"\";\n        this.token = \"\";\n        this.state = {\n            isQuerying: false,\n            buttonContent: \"查询\"\n        };\n    }\n\n    onUsernameInputChange(event: ChangeEvent<HTMLInputElement>) {\n        this.username = event.target.value;\n    }\n\n    onTokenInputChange(event: ChangeEvent<HTMLInputElement>) {\n        this.token = event.target.value;\n    }\n\n    onSubmit() {\n        if (this.username.length > 0) {\n            if (this.token.length > 0) {\n                this.props.inputHandler(this.username, this.token);\n                this.setState({\n                    isQuerying: true\n                });\n            } else {\n                message.error(\"token不得为空\")\n            }\n        } else {\n            message.error(\"登录名不得为空\");\n        }\n    }\n\n    render() {\n        let tokenTip = <div style={{width: \"250px\"}}>\n                        <p>Personal access tokens. 可在<a href=\"https://github.com/settings/tokens\" target='_blank' rel=\"noopener noreferrer\">https://github.com/settings/tokens</a>上生成新的token, 为了安全起见，这里只需要您在生成时勾选read:user\n                        </p>\n                       </div>;\n        return (\n            <div style={{position: \"absolute\",\n                         top: \"50%\",\n                         left: \"50%\",\n                         transform: \"translate(-50%, -50%)\",\n                         msTransform: \"translate(-50%, -50%)\"}}>\n                <Row>\n                    <Col span={24}>\n                        <div style={{height: \"100px\"}}>\n                            <Input onChange={this.onUsernameInputChange.bind(this)}\n                                   placeholder='请输入 GitHub 登录名'/>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        <div style={{height: \"100px\"}}>\n                            <Input.Password onChange={this.onTokenInputChange.bind(this)}\n                                            placeholder='请输入 token'\n                                            addonAfter={\n                                                <Popover content={tokenTip} trigger='click' placement='right'>\n                                                    <Icon type=\"question-circle\" theme=\"twoTone\" />\n                                                </Popover>\n                                            }/>\n\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        <Button type='primary'\n                                size='large'\n                                onClick={this.onSubmit.bind(this)}\n                                disabled={this.state.isQuerying}>\n                            {this.state.buttonContent}\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default LoginPage;","interface QueryResponse {\n    data: {\n        user: {\n            contributionsCollection: {\n                hasAnyContributions: boolean,\n                contributionCalendar: {\n                    totalContributions: number,\n                    weeks: [{\n                        contributionDays: [{\n                            date: Date,\n                            contributionCount: number\n                        }]\n                    }]\n                },\n                totalCommitContributions: number,\n                totalRepositoriesWithContributedCommits: number,\n                commitContributionsByRepository: [{\n                    repository: {\n                        languages: {\n                            nodes: [{\n                                name: string\n                            }]\n                        }\n                    }\n                }],\n                totalIssueContributions: number,\n                totalRepositoriesWithContributedIssues: number,\n                popularIssueContribution: {\n                    issue: {\n                        title: string\n                    }\n                } | null,\n                totalPullRequestContributions: number,\n                totalRepositoriesWithContributedPullRequests: number,\n                popularPullRequestContribution: {\n                    pullRequest: {\n                        title: string\n                    }\n                } | null,\n                repositoryContributions: {\n                    nodes: [{\n                        repository: {\n                            languages: {\n                                nodes: [{\n                                    name: string\n                                }]\n                            }\n                            stargazers: {\n                                totalCount: number\n                            }\n                        }\n                    }]\n                },\n                totalRepositoryContributions: number\n            },\n            starredRepositories: {\n                nodes: [{\n                    languages: {\n                        nodes: [{\n                            name: string\n                        }]\n                    }\n                }],\n                totalCount: number\n            },\n            watching: {\n                nodes: [{\n                    languages: {\n                        nodes: [{\n                            name: string\n                        }]\n                    }\n                }],\n                totalCount: number\n            }\n        }\n    }\n}\n\nclass ContributionData {\n    hasAnyContributions: boolean;\n    totalContributions: number;\n    contributionDays: number;\n    contributionMonths: Array<number>;\n\n    constructor() {\n        this.hasAnyContributions = false;\n        this.totalContributions = 0;\n        this.contributionDays = 0;\n        this.contributionMonths = new Array(12);\n        for (let month = 0; month < 12; month++) {\n            this.contributionMonths[month] = 0;\n        }\n    }\n}\n\nclass CommitData {\n    totalCommitContributions: number;\n    totalRepositoriesWithContributedCommits: number;\n    languages: Map<string, number>;\n\n    constructor() {\n        this.totalCommitContributions = 0;\n        this.totalRepositoriesWithContributedCommits = 0;\n        this.languages = new Map();\n    }\n}\n\nclass IssueData {\n    totalIssueContributions: number;\n    totalRepositoryWithContributedIssues: number;\n    popularIssueContribution: string | null;\n\n    constructor() {\n        this.totalIssueContributions = 0;\n        this.totalRepositoryWithContributedIssues = 0;\n        this.popularIssueContribution = \"\";\n    }\n}\n\nclass PullRequestData {\n    totalPullRequestContributions: number;\n    totalRepositoryWithContributedPullRequests: number;\n    popularPullRequestContribution: string | null;\n\n    constructor() {\n        this.totalPullRequestContributions = 0;\n        this.totalRepositoryWithContributedPullRequests = 0;\n        this.popularPullRequestContribution = \"\";\n    }\n}\n\nclass RepositoryData {\n    totalRepositoryContributions: number;\n    languages: Map<string, number>;\n    stars: number;\n\n    constructor() {\n        this.totalRepositoryContributions = 0;\n        this.languages = new Map();\n        this.stars = 0;\n    }\n}\n\nclass StarData {\n    stars: number;\n    languages: Map<string, number>;\n\n    constructor() {\n        this.languages = new Map();\n        this.stars = 0;\n    }\n}\n\nclass WatchData {\n    watches: number;\n    languages: Map<string, number>;\n\n    constructor() {\n        this.languages = new Map();\n        this.watches = 0;\n    }\n}\n\nclass DataProcessor {\n    username: string;\n    token: string;\n    rawData: QueryResponse | null;\n\n    contributions: ContributionData;\n    commits: CommitData;\n    issues: IssueData;\n    pullRequests: PullRequestData;\n    repositories: RepositoryData;\n    stars: StarData;\n    watches: WatchData;\n\n    constructor(username: string, token: string) {\n        this.username = username;\n        this.token = token;\n        this.rawData = null;\n        this.contributions = new ContributionData();\n        this.commits = new CommitData();\n        this.issues = new IssueData();\n        this.pullRequests = new PullRequestData();\n        this.repositories = new RepositoryData();\n        this.stars = new StarData();\n        this.watches = new WatchData();\n    }\n\n    async fetchEvents() {\n        const headers = {\n            'Authorization': `bearer ${this.token}`\n        };\n        const body = {\n            \"query\": `query {\n                user(login: \"${this.username}\") {\n                    contributionsCollection(from:\"2019-01-01T00:00:00Z\", to:\"2019-12-31T23:59:59Z\") {\n                        hasAnyContributions\n                        contributionCalendar {\n                            totalContributions\n                            weeks {\n                                contributionDays {\n                                    date\n                                    contributionCount\n                                }\n                            }\n                        }\n                        totalCommitContributions\n                        totalRepositoriesWithContributedCommits\n                        commitContributionsByRepository {\n                            repository {\n                                languages(first: 5, orderBy: { direction: DESC, field: SIZE }) {\n                                    nodes {\n                                        name\n                                    }\n                                }\n                            }\n                        }\n                        totalIssueContributions\n                        totalRepositoriesWithContributedIssues\n                        popularIssueContribution {\n                            issue {\n                                title\n                            }\n                        }\n                        totalPullRequestContributions\n                        totalRepositoriesWithContributedPullRequests\n                        popularPullRequestContribution {\n                            pullRequest {\n                                title\n                            }\n                        }\n                        repositoryContributions(first: 64) {\n                            nodes {\n                                repository {\n                                    languages(first: 5, orderBy: { direction: DESC, field: SIZE }) {\n                                        nodes {\n                                            name\n                                        }\n                                    }\n                                    stargazers(first: 1) {\n                                        totalCount\n                                    }\n                                }\n                            }\n                        }\n                        totalRepositoryContributions\n                    }\n                    starredRepositories(first: 64) {\n                        nodes {\n                            languages(first: 5, orderBy: { direction: DESC, field: SIZE }) {\n                                nodes {\n                                    name\n                                }\n                            }\n                        }\n                        totalCount\n                    }\n                    watching(first: 64) {\n                        nodes {\n                            languages(first: 5, orderBy: { direction: DESC, field: SIZE }) {\n                                nodes {\n                                    name\n                                }\n                            }\n                        }\n                        totalCount\n                    }\n                }\n            }`\n        };\n        let res = await fetch(\"https://api.github.com/graphql\", {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: headers\n        });\n        if (res.status !== 200) {\n            let message = \"未知错误\";\n            switch (res.status) {\n                case 401: {\n                    message = \"Token 不正确\";\n                    break;\n                }\n                case 404: {\n                    message = \"未找到该用户\";\n                    break;\n                }\n            }\n            return Promise.reject(message);\n        }\n        const text = await res.text();\n        const reISO = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\n        let dateTimeReceiver = (key: string, value: string) => {\n            let a = reISO.exec(value);\n            if (a) {\n                return new Date(value);\n            }\n            return value;\n        };\n        this.rawData = JSON.parse(text, dateTimeReceiver);\n        return Promise.resolve();\n    }\n\n    processData() {\n        if (this.rawData) {\n            let rawData = this.rawData.data.user.contributionsCollection;\n            // ContributionData\n            this.contributions.hasAnyContributions = rawData.hasAnyContributions;\n            if (!this.contributions.hasAnyContributions) {\n                return;\n            }\n            this.contributions.totalContributions = rawData.contributionCalendar.totalContributions;\n            for (let week of rawData.contributionCalendar.weeks) {\n                for (let day of week.contributionDays) {\n                    this.contributions.contributionMonths[day.date.getMonth()] += day.contributionCount;\n                    if (day.contributionCount > 0) {\n                        this.contributions.contributionDays += 1;\n                    }\n                }\n            }\n\n            // CommitData\n            this.commits.totalCommitContributions = rawData.totalCommitContributions;\n            this.commits.totalRepositoriesWithContributedCommits = rawData.totalRepositoriesWithContributedCommits;\n            for (let repository of rawData.commitContributionsByRepository) {\n                let languages = repository.repository.languages.nodes;\n                for (let rank = 0; rank < languages.length; rank++) {\n                    let score = 1 - rank * 0.1;\n                    let preScore = this.commits.languages.get(languages[rank].name);\n                    if (preScore) {\n                        this.commits.languages.set(languages[rank].name, score + preScore);\n                    } else {\n                        this.commits.languages.set(languages[rank].name, score);\n                    }\n                }\n            }\n\n            // IssueData\n            this.issues.totalIssueContributions = rawData.totalIssueContributions;\n            this.issues.totalRepositoryWithContributedIssues = rawData.totalRepositoriesWithContributedIssues;\n            if (rawData.popularIssueContribution) {\n                this.issues.popularIssueContribution = rawData.popularIssueContribution.issue.title;\n            } else {\n                this.issues.popularIssueContribution = null;\n            }\n\n            // PullRequestData\n            this.pullRequests.totalPullRequestContributions = rawData.totalPullRequestContributions;\n            this.pullRequests.totalRepositoryWithContributedPullRequests = rawData.totalRepositoriesWithContributedPullRequests;\n            if (rawData.popularPullRequestContribution) {\n                this.pullRequests.popularPullRequestContribution = rawData.popularPullRequestContribution.pullRequest.title;\n            } else {\n                this.pullRequests.popularPullRequestContribution = null;\n            }\n\n            // RepositoryData\n            this.repositories.totalRepositoryContributions = rawData.totalRepositoryContributions;\n            for (let repository of rawData.repositoryContributions.nodes) {\n                let languages = repository.repository.languages.nodes;\n                for (let rank = 0; rank < languages.length; rank++) {\n                    let score = 1 - rank * 0.1;\n                    let preScore = this.repositories.languages.get(languages[rank].name);\n                    if (preScore) {\n                        this.repositories.languages.set(languages[rank].name, score + preScore);\n                    } else {\n                        this.repositories.languages.set(languages[rank].name, score);\n                    }\n                }\n                this.repositories.stars += repository.repository.stargazers.totalCount;\n            }\n\n            // StarData\n            this.stars.stars = this.rawData.data.user.starredRepositories.totalCount;\n            for (let repository of this.rawData.data.user.starredRepositories.nodes) {\n                let languages = repository.languages.nodes;\n                for (let rank = 0; rank < languages.length; rank++) {\n                    let score = 1 - rank * 0.1;\n                    let preScore = this.stars.languages.get(languages[rank].name);\n                    if (preScore) {\n                        this.stars.languages.set(languages[rank].name, score + preScore);\n                    } else {\n                        this.stars.languages.set(languages[rank].name, score);\n                    }\n                }\n            }\n\n            // WatchData\n            this.watches.watches = this.rawData.data.user.watching.totalCount;\n            for (let repository of this.rawData.data.user.watching.nodes) {\n                let languages = repository.languages.nodes;\n                for (let rank = 0; rank < languages.length; rank++) {\n                    let score = 1 - rank * 0.1;\n                    let preScore = this.watches.languages.get(languages[rank].name);\n                    if (preScore) {\n                        this.watches.languages.set(languages[rank].name, score + preScore);\n                    } else {\n                        this.watches.languages.set(languages[rank].name, score);\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport { DataProcessor }","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {Button, Col, message, Row, Typography} from \"antd\";\nimport 'antd/dist/antd.css';\nimport { ResponsivePie, PieDatum } from '@nivo/pie';\nimport { ResponsiveBar, BarDatum } from '@nivo/bar';\n// @ts-ignore\nimport domtoimage from 'dom-to-image';\n// @ts-ignore\nimport { saveAs } from 'file-saver';\n\nimport { DataProcessor } from \"./data-processor\";\n\nconst { Title, Paragraph } = Typography;\n\nconst frameHeight = \"500px\";\n\ninterface DataPageProps {\n    username: string,\n    token: string,\n    goBack: () => void,\n}\n\ninterface DataPageState {\n    fetchingTip: string,\n    isProcessing: boolean,\n    width: number,\n    height: number\n}\n\nclass DataPage extends Component<DataPageProps, DataPageState> {\n    dataProcessor: DataProcessor;\n\n    constructor(props: DataPageProps) {\n        super(props);\n\n        this.dataProcessor = new DataProcessor(this.props.username, this.props.token);\n        this.state = {\n            fetchingTip: \"正在获取数据...\",\n            isProcessing: true,\n            width: 0,\n            height: 0\n        };\n    }\n\n    componentDidMount(): void {\n        this.dataProcessor.fetchEvents()\n            .then(() => {\n                this.setState({\n                    fetchingTip: \"正在处理数据...\"\n                })\n            })\n            .then(() => {\n                this.dataProcessor.processData();\n                this.setState({\n                    isProcessing: false\n                });\n                this.renderDataPage();\n            })\n            .catch((error: string) => {\n                message.error(error);\n                this.props.goBack();\n            })\n    }\n\n    contributionFrame() {\n        const data = [\n            {\n                id: \"使用\",\n                value: this.dataProcessor.contributions.contributionDays\n            },\n            {\n                id: \"未使用\",\n                value: 365 - this.dataProcessor.contributions.contributionDays\n            }\n        ];\n\n        const pieChart = (data: PieDatum[]) => {\n            return (\n                <ResponsivePie data={data}\n                               isInteractive={false}\n                               enableRadialLabels={false}/>\n            );\n        };\n\n        return (\n            <Row key='contributionFrame'>\n                <Col span={24}>\n                    <div style={{ display: \"flex\",\n                         justifyContent: 'center',\n                         alignItems: 'center',\n                         height: frameHeight }}>\n                        <Title>\n                            在2019年的365天里，你一共有{this.dataProcessor.contributions.contributionDays}天在使用 GitHub\n                        </Title>\n                        {pieChart(data)}\n                    </div>\n                </Col>\n            </Row>\n        );\n    }\n\n    diligenceFrame() {\n        let hardMonths = this.dataProcessor.contributions.contributionMonths.filter((month) => month > 20);\n\n        let diligentMessage = \"\";\n        if (hardMonths.length === 12) {\n            diligentMessage = \"你每个月都很努力呢\";\n        } else if (hardMonths.length >= 10) {\n            diligentMessage = \"你几乎每个月都很努力呢\";\n        } else {\n            let maxMonths: number[] = [];\n            let max = 0;\n            for (let month = 0; month < this.dataProcessor.contributions.contributionMonths.length; month++) {\n                if (this.dataProcessor.contributions.contributionMonths[month] > max) {\n                    max = this.dataProcessor.contributions.contributionMonths[month];\n                    maxMonths = [month];\n                } else if (this.dataProcessor.contributions.contributionMonths[month] === max) {\n                    maxMonths.push(month);\n                }\n            }\n            let hardMonthDescription = maxMonths.map((month) => (month + 1).toString() + '月').join('、');\n            diligentMessage = \"你在\" + hardMonthDescription + \"很努力呢\";\n        }\n\n        let data: BarDatum[] = this.dataProcessor.contributions.contributionMonths\n            .map((month, index) => {\n                return {\n                    month: (index + 1).toString() + \"月\",\n                    contributions: month\n                }\n            });\n\n        const barChart = (data: BarDatum[]) => {\n            return (\n                <ResponsiveBar data={data}\n                               indexBy='month'\n                               keys={['contributions']}\n                               key='diligenceBarChart'\n                               margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                               legends={[\n                                   {\n                                       dataFrom: 'keys',\n                                       anchor: 'bottom-right',\n                                       direction: 'column',\n                                       justify: false,\n                                       translateX: 120,\n                                       translateY: 0,\n                                       itemsSpacing: 2,\n                                       itemWidth: 100,\n                                       itemHeight: 20,\n                                       itemDirection: 'left-to-right',\n                                       itemOpacity: 0.85,\n                                       symbolSize: 20,\n                                       effects: [\n                                           {\n                                               on: 'hover',\n                                               style: {\n                                                   itemOpacity: 1\n                                               }\n                                           }\n                                       ]\n                                   }]}/>\n            );\n        };\n\n        return (\n            <Row key='diligenceFrame'>\n                <Col span={24}>\n                    <div style={{ display: \"flex\",\n                                  justifyContent: 'center',\n                                  alignItems: 'center',\n                                  height: frameHeight }}>\n                            {[\n                                barChart(data),\n                                <Title key='diligenceMessage'>{diligentMessage}</Title>\n                            ]}\n                    </div>\n                </Col>\n            </Row>\n        );\n    }\n\n    commitFrame() {\n        let hasCommits = this.dataProcessor.commits.totalCommitContributions !== 0;\n        let commitMessage1 = \"你共向\" + this.dataProcessor.commits.totalRepositoriesWithContributedCommits.toString() + '个仓库提交了' + this.dataProcessor.commits.totalCommitContributions + \"次 commits\";\n        let commitMessage2 = \"这些是你在这些 commits 中使用的主要语言\";\n\n        let sortedLanguages = Array.from(this.dataProcessor.commits.languages)\n            .sort((language1, language2) => {\n                return language1[1] - language2[1];\n            });\n\n        let data: PieDatum[] = sortedLanguages.map((language) => {\n            return {\n                id: language[0],\n                value: language[1],\n            }\n        });\n\n        const pieChart = (data: PieDatum[]) => {\n            return (\n                <ResponsivePie data={data}\n                               enableSlicesLabels={false}\n                               isInteractive={false}\n                               margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                               key='commitPieChart'/>\n            );\n        };\n\n        if (hasCommits) {\n            return (\n                <Row key='commitFrame'>\n                    <Col span={24}>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            height: frameHeight\n                        }}>\n                            {[\n                                <Title key='commitMessage'>{commitMessage1}<br/>{commitMessage2}</Title>,\n                                pieChart(data)\n                            ]}\n                        </div>\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <div key='commitFrame' />\n            );\n        }\n    }\n\n    repositoryFrame() {\n        let hasRepository = this.dataProcessor.repositories.totalRepositoryContributions !== 0;\n        let repositoryMessage1 = \"你共创建了\" + this.dataProcessor.repositories.totalRepositoryContributions.toString() + \"个仓库\";\n        let repositoryMessage2 = \"获得了\" + this.dataProcessor.repositories.stars.toString() + \"颗 star\";\n        let repositoryMessage3 = \"这些是你在这些仓库中使用的主要语言\";\n\n        let sortedLanguages = Array.from(this.dataProcessor.repositories.languages)\n            .sort((language1, language2) => {\n                return language1[1] - language2[1];\n            });\n\n        let data: PieDatum[] = sortedLanguages.map((language) => {\n            return {\n                id: language[0],\n                value: language[1],\n            }\n        });\n\n        const pieChart = (data: PieDatum[]) => {\n            return (\n                <ResponsivePie data={data}\n                               enableSlicesLabels={false}\n                               isInteractive={false}\n                               margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                               key='repositoryPieChart'/>\n            );\n        };\n\n        if (hasRepository) {\n            return (\n                <Row key='repositoryFrame'>\n                    <Col span={24}>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            height: frameHeight\n                        }}>\n                            {[\n                                pieChart(data),\n                                <Title key='repositoryMessage'>\n                                    {repositoryMessage1}<br/>{repositoryMessage2}<br/>{repositoryMessage3}\n                                </Title>\n                            ]}\n                        </div>\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <div key='repositoryFrame' />\n            );\n        }\n    }\n\n    starFrame() {\n        let hasStar = this.dataProcessor.stars.stars !== 0;\n        let starMessage1 = \"你共 star 了\" + this.dataProcessor.stars.stars.toString() + \"个仓库\";\n        let starMessage2 = \"这些是那些仓库使用的主要语言\";\n\n        let sortedLanguages = Array.from(this.dataProcessor.stars.languages)\n            .sort((language1, language2) => {\n                return language1[1] - language2[1];\n            });\n\n        let data: PieDatum[] = sortedLanguages.map((language) => {\n            return {\n                id: language[0],\n                value: language[1],\n            }\n        });\n\n        const pieChart = (data: PieDatum[]) => {\n            return (\n                <ResponsivePie data={data}\n                               enableSlicesLabels={false}\n                               isInteractive={false}\n                               margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                               key='starPieChart'/>\n            );\n        };\n\n        if (hasStar) {\n            return (\n                <Row key='starFrame'>\n                    <Col span={24}>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            height: frameHeight\n                        }}>\n                            {[\n                                <Title key='starMessage'>{starMessage1}<br/>{starMessage2}</Title>,\n                                pieChart(data)\n                            ]}\n                        </div>\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <div key='starFrame' />\n            );\n        }\n    }\n\n    watchFrame() {\n        let hasWatch = this.dataProcessor.stars.stars !== 0;\n        let WatchMessage1 = \"你共 watch 了\" + this.dataProcessor.watches.watches.toString() + \"个仓库\";\n        let WatchMessage2 = \"这些是那些仓库使用的主要语言\";\n\n        let sortedLanguages = Array.from(this.dataProcessor.watches.languages)\n            .sort((language1, language2) => {\n                return language1[1] - language2[1];\n            });\n\n        let data: PieDatum[] = sortedLanguages.map((language) => {\n            return {\n                id: language[0],\n                value: language[1],\n            }\n        });\n\n        const pieChart = (data: PieDatum[]) => {\n            return (\n                <ResponsivePie data={data}\n                               enableSlicesLabels={false}\n                               isInteractive={false}\n                               margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                               key='watchPieChart'/>\n            );\n        };\n\n        if (hasWatch) {\n            return (\n                <Row key='watchFrame'>\n                    <Col span={24}>\n                        <div style={{\n                            display: \"flex\",\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            height: frameHeight\n                        }}>\n                            {[\n                                pieChart(data),\n                                <Title key='watchMessage'>{WatchMessage1}<br/>{WatchMessage2}</Title>\n                            ]}\n                        </div>\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <div key='watchFrame' />\n            );\n        }\n    }\n\n    issueFrame() {\n        let hasIssue = this.dataProcessor.issues.totalIssueContributions !== 0;\n        let issueMessage1 = \"你共向\"+ this.dataProcessor.issues.totalRepositoryWithContributedIssues +\"个仓库提出了\" + this.dataProcessor.issues.totalIssueContributions + \"条 issue\";\n        let issueMessage2 = \"这是你最受关注的一条 issue\";\n\n        if (hasIssue) {\n            return (\n                <Row key='issueFrame'>\n                    <Col span={16}>\n                        <div style={{ display: \"flex\",\n                                      justifyContent: 'center',\n                                      alignItems: 'center',\n                                      height: frameHeight }}>\n                            <Title>\n                                {issueMessage1}<br/>{issueMessage2}\n                            </Title>\n                        </div>\n                    </Col>\n                    <Col span={8}>\n                        <div style={{ display: \"flex\",\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            height: frameHeight }}>\n                            <Title>\n                                {this.dataProcessor.issues.popularIssueContribution}\n                            </Title>\n                        </div>\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <div key='issueFrame' />\n            );\n        }\n    }\n\n    pullRequestFrame() {\n        let hasPullrequest = this.dataProcessor.pullRequests.totalPullRequestContributions !== 0;\n        let pullRequestMessage1 = \"你共向\"+ this.dataProcessor.pullRequests.totalRepositoryWithContributedPullRequests +\"个仓库发起了\" + this.dataProcessor.pullRequests.totalPullRequestContributions + \"个 pull requests\";\n        let pullRequestMessage2 = \"这是你最受关注的一个 pull request\";\n\n        if (hasPullrequest) {\n            return (\n                <Row key='pullRequestFrame'>\n                    <Col span={16}>\n                        <div style={{ display: \"flex\",\n                                      justifyContent: 'center',\n                                      alignItems: 'center',\n                                      height: frameHeight }}>\n                            <Title>\n                                {pullRequestMessage1}<br/>{pullRequestMessage2}\n                            </Title>\n                        </div>\n                    </Col>\n                    <Col span={8}>\n                        <div style={{ display: \"flex\",\n                                      justifyContent: 'center',\n                                      alignItems: 'center',\n                                      height: frameHeight }}>\n                            <Title>\n                                {this.dataProcessor.pullRequests.popularPullRequestContribution}\n                            </Title>\n                        </div>\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <div key='pullRequestFrame' />\n            );\n        }\n    }\n\n    saveFrame() {\n        let onClick = () => {\n            // @ts-ignore\n            domtoimage.toBlob(document.getElementById('dataFrames'))\n                .then((blob: any) => {\n                    // @ts-ignore\n                    saveAs(blob, 'my-github-year.png');\n                })\n                .catch((e: any) => {\n                    console.log(e);\n                });\n        };\n\n        return (\n            <Row key='saveFrame'>\n                <Col span={24}>\n                    <div style={{ display: \"flex\",\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        height: frameHeight }}>\n                        <Typography>\n                        <Title>\n                            本项目仓库位于<a href='https://github.com/Evian-Zhang/my-github-year'>Evian-Zhang/my-github-year</a>\n                        </Title>\n                        <Paragraph>\n                        <Button onClick={onClick} type='primary' size='large'>\n                            点击下载图片\n                        </Button>\n                        </Paragraph>\n                        </Typography>\n                    </div>\n                </Col>\n            </Row>\n        );\n    }\n\n    renderDataPage() {\n        const noContributionFrame = () => {\n            return (\n                <div style={{ display: \"flex\",\n                              justifyContent: 'center',\n                              alignItems: 'center',\n                              height: frameHeight }}>\n                    <Title style={{ textAlign: 'center' }}>\n                        你在2019年似乎并没有使用 GitHub\n                    </Title>\n                </div>\n            );\n        };\n\n        const dataPage = () => {\n            return (\n            <div>\n                {!this.dataProcessor.contributions.hasAnyContributions &&\n                <Row type='flex' align='middle'>\n                    <Col span={24}>\n                        {noContributionFrame()}\n                    </Col>\n                </Row>}\n                <div id='dataFrames'>\n                {this.dataProcessor.contributions.hasAnyContributions &&\n                [\n                    <Row key='idFrame'>\n                        <Col span={24}>\n                            <div style={{ display: \"flex\",\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                height: frameHeight }}>\n                                <Title>\n                                    {this.dataProcessor.username}的2019年\n                                </Title>\n                            </div>\n                        </Col>\n                    </Row>,\n                    this.contributionFrame(),\n                    this.diligenceFrame(),\n                    this.commitFrame(),\n                    this.repositoryFrame(),\n                    this.starFrame(),\n                    this.watchFrame(),\n                    this.issueFrame(),\n                    this.pullRequestFrame()\n                ]}\n                </div>\n                {\n                    this.dataProcessor.contributions.hasAnyContributions &&\n                    this.saveFrame()\n                }\n            </div>\n            );\n        };\n        ReactDOM.render(dataPage(), document.getElementById('dataPage'));\n    }\n\n    render() {\n\n        return (\n            <div id='dataPage'>\n                {this.state.isProcessing &&\n                <Row type='flex' align='middle'>\n                    <Col span={24}>\n                        <div style={{ display: \"flex\",\n                                      justifyContent: 'center',\n                                      alignItems: 'center',\n                                      height: frameHeight }}>\n                            <Title style={{ textAlign: 'center' }}>\n                                {this.state.fetchingTip}\n                            </Title>\n                        </div>\n                    </Col>\n                </Row>}\n\n            </div>\n        );\n    }\n}\n\nexport default DataPage;","import React, { Component } from 'react'\n\nimport LoginPage from \"./login-page\";\nimport DataPage from \"./data-page\";\n\ninterface MainPageProps {\n\n}\n\ninterface MainPageState {\n    isUsernameValid: boolean\n}\n\nclass MainPage extends Component<MainPageProps, MainPageState> {\n    username: string;\n    token: string;\n    constructor(props: MainPageProps) {\n        super(props);\n\n        this.username = \"\";\n        this.token = \"\";\n        this.state = {\n            isUsernameValid: false\n        };\n    }\n\n    usernameTokenHandler(name: string, token: string) {\n        this.username = name;\n        this.token = token;\n        this.setState({\n            isUsernameValid: true\n        });\n    }\n\n    goBack() {\n        this.username = \"\";\n        this.token = \"\";\n        this.setState({\n            isUsernameValid: false,\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                {!this.state.isUsernameValid &&\n                <LoginPage inputHandler={this.usernameTokenHandler.bind(this)}/>}\n                {this.state.isUsernameValid &&\n                <DataPage username={this.username}\n                          token={this.token}\n                          goBack={this.goBack.bind(this)}/>}\n            </div>\n        );\n    }\n}\n\nexport default MainPage;","import React from 'react';\nimport './App.css';\n\nimport MainPage from \"./main-page\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <MainPage/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}